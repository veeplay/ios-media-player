{"Other%20Type%20Definitions.html#/c:APSMediaPlayer.h@T@APSMediaPlayerFinishBlock":{"name":"APSMediaPlayerFinishBlock","abstract":"<p>The block to be executed when the current playlist is completed"},"Other%20Type%20Definitions.html#/c:APSTypes.h@T@APSThumbnailGeneratedBlock":{"name":"APSThumbnailGeneratedBlock","abstract":"<p>A block that is used by the thumbnail generation methods to asynchronously return an image</p>"},"Protocols/KRAdapter.html#/c:objc(pl)KRAdapter(im)type":{"name":"-type","abstract":"<p>Returns the adapter type.</p>","parent_name":"KRAdapter"},"Protocols/APSVASTAdBreakDelegate.html#/c:objc(pl)APSVASTAdBreakDelegate(im)advertisingIdentifierForAdBreak:":{"name":"-advertisingIdentifierForAdBreak:","abstract":"<p>Asks the delegate for the advertising identifier for this adbreak.</p>","parent_name":"APSVASTAdBreakDelegate"},"Protocols/APSVASTAdBreakDelegate.html#/c:objc(pl)APSVASTAdBreakDelegate(im)advertisingIdentifierTypeForAdBreak:":{"name":"-advertisingIdentifierTypeForAdBreak:","abstract":"<p>Asks the delegate for the type of the advertising identifier for this adbreak.","parent_name":"APSVASTAdBreakDelegate"},"Protocols/APSVASTAdBreakDelegate.html#/c:objc(pl)APSVASTAdBreakDelegate(im)limitAdTrackingStatusForAdBreak:":{"name":"-limitAdTrackingStatusForAdBreak:","abstract":"<p>Asks the delegate if Limit Ad Tracking is enabled for this adbreak.</p>","parent_name":"APSVASTAdBreakDelegate"},"Protocols/APSVASTAdBreakDelegate.html#/c:objc(pl)APSVASTAdBreakDelegate(im)locationCoordinatesForAdBreak:":{"name":"-locationCoordinatesForAdBreak:","abstract":"<p>Asks the delegate for the current coordinates","parent_name":"APSVASTAdBreakDelegate"},"Protocols/APSVASTAdBreakDelegate.html#/c:objc(pl)APSVASTAdBreakDelegate(im)shouldPlayConditionalAdForAdBreak:":{"name":"-shouldPlayConditionalAdForAdBreak:","abstract":"<p>Asks the delegate if a conditional ad should be played or not</p>","parent_name":"APSVASTAdBreakDelegate"},"Protocols/APSUnitManagerProtocol.html#/c:objc(pl)APSUnitManagerProtocol(im)startForUnit:":{"name":"-startForUnit:","abstract":"<p>When an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> is loaded by the player, if it declares requiring a manager that matches the current object&rsquo;s [KRAdapter type], this method will be invoked.</p>","parent_name":"APSUnitManagerProtocol"},"Protocols/APSUnitManagerProtocol.html#/c:objc(pl)APSUnitManagerProtocol(im)end":{"name":"-end","abstract":"<p>When an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> ends playback, if it declares requiring a manager that matches the current object&rsquo;s [KRAdapter type], this method will be invoked.</p>","parent_name":"APSUnitManagerProtocol"},"Protocols/APSMediaTrackableObject.html#/c:objc(pl)APSMediaTrackableObject(py)trackingURLs":{"name":"trackingURLs","abstract":"<p>This dictionary defines all URLs that need to be notified of specific events from the object&rsquo;s lifecycle. The keys are event constants, as defined in <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaPlayer.html\">APSMediaPlayer</a></code>, and the values are <code>NSArrays</code> containing <code>NSURL</code> objects.</p>","parent_name":"APSMediaTrackableObject"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)view":{"name":"view","abstract":"<p>The container <code>UIView</code> of the player.</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)isPreparedToPlay":{"name":"isPreparedToPlay","abstract":"<p>Returns a Boolean value specifing if the player is ready to play media</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)initialPlaybackTime":{"name":"initialPlaybackTime","abstract":"<p>Get or set the initial time in stream from which the player will start playing the media</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)currentPlaybackTime":{"name":"currentPlaybackTime","abstract":"<p>Get or set the current position in stream</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)playableDuration":{"name":"playableDuration","abstract":"<p>Get the duration of the buffered content</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)duration":{"name":"duration","abstract":"<p>Get the total duration of the video</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)currentPlaybackRate":{"name":"currentPlaybackRate","abstract":"<p>Get or set the current playback rate</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)contentURL":{"name":"contentURL","abstract":"<p>Get or set the current media&rsquo;s URL</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)scalingMode":{"name":"scalingMode","abstract":"<p>Get or set the scaling mode of the video according to its viewport</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)shouldAutoplay":{"name":"shouldAutoplay","abstract":"<p>Get or set if the player should autoplay an URL as soon as it is provided</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)playbackState":{"name":"playbackState","abstract":"<p>Get the current playback state</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)loadState":{"name":"loadState","abstract":"<p>Get the current state of the buffer</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)movieSourceType":{"name":"movieSourceType","abstract":"<p>Get the current media&rsquo;s source type (e.g. file or stream)</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)controlStyle":{"name":"controlStyle","abstract":"<p>Set or get how the player controls will appear</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)timedMetadata":{"name":"timedMetadata","abstract":"<p>Obtains the most recent time-based metadata provided by the streamed movie.</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)allowsAirPlay":{"name":"allowsAirPlay","abstract":"<p>Specifies whether the movie player allows AirPlay movie playback.</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(py)airPlayVideoActive":{"name":"airPlayVideoActive","abstract":"<p>Check out if AirPlay video is started or stopped.</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)prepareToPlay":{"name":"-prepareToPlay","abstract":"<p>Prepare to play media. This is also automatically called on play</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)play":{"name":"-play","abstract":"<p>Play the current media in the queue</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)pause":{"name":"-pause","abstract":"<p>Pause the current playing media</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)stop":{"name":"-stop","abstract":"<p>Stop the player, remove all the items from the queue and remove the player&rsquo;s CALayer from its superlayer</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)beginSeekingForward":{"name":"-beginSeekingForward","abstract":"<p>Play the media with an increased playback rate (speed)</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)beginSeekingBackward":{"name":"-beginSeekingBackward","abstract":"<p>Rewind the media</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)endSeeking":{"name":"-endSeeking","abstract":"<p>Stop the seeking process startd by beginSeekingForward or beginSeekingBackward;</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)streamSourceType":{"name":"-streamSourceType","abstract":"<p>Get the stream&rsquo;s source type. Different by movieSourceType because it returns if the stream is","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)thumbnailAt:withCompletionBlock:":{"name":"-thumbnailAt:withCompletionBlock:","abstract":"<p>Request a thumbnail image</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)setVolume:":{"name":"-setVolume:","abstract":"<p>Set the sound volume of the player, in the range of 0.0 to 1.0.</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)getVolume":{"name":"-getVolume","abstract":"<p>Get the sound volume of the player, in the range of 0.0 to 1.0.</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)setMute:":{"name":"-setMute:","abstract":"<p>Mute the player</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)getMute":{"name":"-getMute","abstract":"<p>Get if the player is muted or no</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)appendURL:":{"name":"-appendURL:","abstract":"<p>Add an URL to the current play queue</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)insertURL:atIndex:":{"name":"-insertURL:atIndex:","abstract":"<p>Insert an URL to the current play queue at the given position</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(cm)backendPriority":{"name":"+backendPriority","abstract":"<p>The priority based on which the backend will be selected</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)willSetURL:":{"name":"-willSetURL:","abstract":"<p>This is invoked by the player before setting a new URL for playback</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)didSetURL:":{"name":"-didSetURL:","abstract":"<p>This is invoked by the player after setting a new URL for playback</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)clear":{"name":"-clear","abstract":"<p>This is invoked by the player after playback is complete</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)startPictureInPicture":{"name":"-startPictureInPicture","abstract":"<p>Start Picture in Picture, if possible</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)stopPictureInPicture":{"name":"-stopPictureInPicture","abstract":"<p>Stop Picture in Picture</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)isPictureInPictureActive":{"name":"-isPictureInPictureActive","abstract":"<p>Get Picture in Picture status</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)availableSubtitles":{"name":"-availableSubtitles","abstract":"<p>Get a list of available subtitles</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)enableSubtitle:":{"name":"-enableSubtitle:","abstract":"<p>Enable the corresponding subtitle for the given language</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)availableAudioTracks":{"name":"-availableAudioTracks","abstract":"<p>Get a list of available audio tracks</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerProtocol.html#/c:objc(pl)APSMediaPlayerProtocol(im)enableAudioTrack:":{"name":"-enableAudioTrack:","abstract":"<p>Select a track id</p>","parent_name":"APSMediaPlayerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)load":{"name":"-load","abstract":"<p>This method is invoked by the player when first diplaying the overlay controller object.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)preload":{"name":"-preload","abstract":"<p>This method is invoked by the player on a background thread, before the overlay start point, as set by the [APSMediaEvent preTriggerInterval] property.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)update":{"name":"-update","abstract":"<p>This method is called whenever the playback state of the player is changed (e.g. current playback time changes, playback state changes etc.). If the overlay controller needs to update its interface as a result of these changes, the updates should be performed in this method.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)overlayWillBeRemoved":{"name":"-overlayWillBeRemoved","abstract":"<p>This method is invoked by the player, before the overlay controller&rsquo;s view is removed from the player surface. Any overlay cleanup code should be performed in this method.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)didEnterFullscreen":{"name":"-didEnterFullscreen","abstract":"<p>This method is invoked by the player, when fullscreen mode is enabled.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)didExitFullscreen":{"name":"-didExitFullscreen","abstract":"<p>This method is invoked by the player, when fullscreen mode is disabled.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)didStartPictureInPicture":{"name":"-didStartPictureInPicture","abstract":"<p>This method is invoked by the player, when picture in picture mode is enabled.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)didStopPictureInPicture":{"name":"-didStopPictureInPicture","abstract":"<p>This method is invoked by the player, when picture in picture mode is disabled.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)currentPlaybackTime":{"name":"-currentPlaybackTime","abstract":"<p>Allows an overlay controller to return a current playback time in place of the parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> object, if the <code>url</code> property of that object is nil.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)playableDuration":{"name":"-playableDuration","abstract":"<p>Allows an overlay controller to return a total playable (buffered) time in place of the parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> object, if the <code>url</code> property of that object is nil.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)setCurrentPlaybackTime:":{"name":"-setCurrentPlaybackTime:","abstract":"<p>Allows an overlay that handles media playback in place of the parent unit to internally set the current playback time.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)duration":{"name":"-duration","abstract":"<p>Allows an overlay controller to return a total playback duration in place of the parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> object, if the <code>url</code> property of that object is nil.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)playbackState":{"name":"-playbackState","abstract":"<p>Allows an overlay controller to return a playback state in place of the parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> object, if the <code>url</code> property of that object is nil.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)loadState":{"name":"-loadState","abstract":"<p>Allows an overlay controller to return a load state in place of the parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> object, if the <code>url</code> property of that object is nil.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)movieSourceType":{"name":"-movieSourceType","abstract":"<p>Allows an overlay controller to return a media source type in place of the parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> object, if the <code>url</code> property of that object is nil.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)play":{"name":"-play","abstract":"<p>Allows an overlay that handles media playback in place of the parent unit to start playback.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)stop":{"name":"-stop","abstract":"<p>Allows an overlay that handles media playback in place of the parent unit to stop playback.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)pause":{"name":"-pause","abstract":"<p>Allows an overlay that handles media playback in place of the parent unit to pause playback.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)thumbnailAt:withCompletionBlock:":{"name":"-thumbnailAt:withCompletionBlock:","abstract":"<p>Allows an overlay that handles media playback in place of the parent unit to return a thumbnail image at a specific time interval from the managed video.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html#/c:objc(pl)APSMediaPlayerOverlayControllerProtocol(im)onWebviewDismiss":{"name":"-onWebviewDismiss","abstract":"<p>Allows an overlay controller to specify what action the player should take when it comes back into focus, after a modal in-app web browser was triggered and dismissed by user interaction.</p>","parent_name":"APSMediaPlayerOverlayControllerProtocol"},"Protocols/APSMediaPlayerActionDelegate.html#/c:objc(pl)APSMediaPlayerActionDelegate(im)canRespondTo:":{"name":"-canRespondTo:","abstract":"<p>Returns a Boolean value indicating whether the receiver is able to interpret and react to the given input <code>NSURL</code>.</p>","parent_name":"APSMediaPlayerActionDelegate"},"Protocols/APSMediaPlayerActionDelegate.html#/c:objc(pl)APSMediaPlayerActionDelegate(im)respondTo:":{"name":"-respondTo:","abstract":"<p>If the <code>APSMediaPlayerActionDelegate</code> implementing object returns <code>YES</code> from the <code>canRespondTo</code> method for a certain URL, this method will be triggered to request effective execution.</p>","parent_name":"APSMediaPlayerActionDelegate"},"Protocols/APSMediaEventProtocol.html#/c:objc(pl)APSMediaEventProtocol(im)onTrigger":{"name":"-onTrigger","abstract":"<p>This code will be executed once the event is triggered by the player.</p>","parent_name":"APSMediaEventProtocol"},"Protocols/APSMediaEventProtocol.html#/c:objc(pl)APSMediaEventProtocol(im)onPreload":{"name":"-onPreload","abstract":"<p>This method will be invoked on a different thread by the player, before the event start point, as set by the [APSMediaEvent preTriggerInterval] property.</p>","parent_name":"APSMediaEventProtocol"},"Protocols/APSMediaEventProtocol.html#/c:objc(pl)APSMediaEventProtocol(im)onUpdate":{"name":"-onUpdate","abstract":"<p>This method will be invoked by the player periodically, giving the event the opportunity to respond to updated playback information.</p>","parent_name":"APSMediaEventProtocol"},"Protocols/APSMediaEventProtocol.html#/c:objc(pl)APSMediaEventProtocol(im)onUnload":{"name":"-onUnload","abstract":"<p>This method will be invoked by the player once the event has reached the end point and will be deallocated.</p>","parent_name":"APSMediaEventProtocol"},"Protocols/APSMediaEventProtocol.html#/c:objc(pl)APSMediaEventProtocol(im)setStateWithoutTriggeringKVO:":{"name":"-setStateWithoutTriggeringKVO:","abstract":"<p>This method allow setting event&rsquo;s state without triggering KVO observers","parent_name":"APSMediaEventProtocol"},"Protocols/APSMediaBuilderPlugin.html#/c:objc(pl)APSMediaBuilderPlugin(im)startForBuilder:":{"name":"-startForBuilder:","abstract":"<p>This method will be called at the beginning of the <code>mediaUnits</code> method of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaBuilder.html\">APSMediaBuilder</a></code> object that registered the plugin.</p>","parent_name":"APSMediaBuilderPlugin"},"Protocols/APSMediaBuilderPlugin.html#/c:objc(pl)APSMediaBuilderPlugin(im)dictionaryConfigurationKey":{"name":"-dictionaryConfigurationKey","abstract":"<p>The string key that will be used in the root of JSON and dictionary builder configurations to hold all the specific configuration details for the plugin.</p>","parent_name":"APSMediaBuilderPlugin"},"Protocols/APSMediaBuilderPlugin.html#/c:objc(pl)APSMediaBuilderPlugin(im)configureFromDictionary:":{"name":"-configureFromDictionary:","abstract":"<p>This method is called by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaBuilder.html\">APSMediaBuilder</a></code> object, in the process of its configuration. The method is only called if in the root of the configuring JSON or <code>NSDictionary</code> there is a key equal to the string defined by the plugin using the <code>dictionaryConfigurationKey</code> method.</p>","parent_name":"APSMediaBuilderPlugin"},"Other%20Protocols.html#/c:objc(pl)APSControlPluginProtocol":{"name":"APSControlPluginProtocol","abstract":"<p>The <code>APSControlPluginProtocol</code> allows the definition of 3rd party buttons that need to be displayed in the Veeplay control bar. This protocol extends the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/KRAdapter.html\">KRAdapter</a></code> protocol, so objects should also implement a <code>type</code> method, returning a unique string to register under.</p>"},"Protocols/APSMediaBuilderPlugin.html":{"name":"APSMediaBuilderPlugin","abstract":"<p>Defines methods that need to be implemented by any object that want to register as an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaBuilder.html\">APSMediaBuilder</a></code> plugin.</p>"},"Protocols/APSMediaEventProtocol.html":{"name":"APSMediaEventProtocol","abstract":"<p>The <code>APSMediaEventProtocol</code> protocol describes methods that objects extending the associated <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaEvent.html\">APSMediaEvent</a></code> class must or can implement.</p>"},"Protocols/APSMediaPlayerActionDelegate.html":{"name":"APSMediaPlayerActionDelegate","abstract":"<p>The <code>APSMediaPlayerActionDelegate</code> protocol declares the two methods that a class must implement in order to become an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaPlayer.html\">APSMediaPlayer</a></code> actionDelegate. The object implementing <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaPlayer.html\">APSMediaPlayer</a></code> will receive information about the URLs that need to be executed as the user interacts with the player.</p>"},"Protocols/APSMediaPlayerOverlayControllerProtocol.html":{"name":"APSMediaPlayerOverlayControllerProtocol","abstract":"<p>The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaPlayerOverlayController.html\">APSMediaPlayerOverlayController</a></code> defines all the methods that a <code>UIViewController</code> subclass must or can implement to be able to register as an overlay controller with the player. This protocol extends the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/KRAdapter.html\">KRAdapter</a></code> protocol, so objects should also implement a <code>type</code> method, returning a unique string to register under.</p>"},"Protocols/APSMediaPlayerProtocol.html":{"name":"APSMediaPlayerProtocol","abstract":"<p>This protocol allows 3rd party implementations of the media rendering engine that stands behind Veeplay. This protocol extends the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/KRAdapter.html\">KRAdapter</a></code> protocol, so objects should also implement a <code>type</code> method, returning a unique string to register under.</p>"},"Protocols/APSMediaTrackableObject.html":{"name":"APSMediaTrackableObject","abstract":"<p>Defines the properties that an object needs to implement to become trackable by the player.</p>"},"Protocols/APSUnitManagerProtocol.html":{"name":"APSUnitManagerProtocol"},"Protocols/APSVASTAdBreakDelegate.html":{"name":"APSVASTAdBreakDelegate","abstract":"<p>Protocol definition for APSVASTAdBreakDelegate</p>"},"Protocols/KRAdapter.html":{"name":"KRAdapter","abstract":"<p>The <code>KRAdapter</code> protocol allows an object to declare itself as being of a certain type.</p>"},"Enums/APSSkipOverlayProgressPosition.html#/c:@E@APSSkipOverlayProgressPosition@kAPSSkipOverlayProgressPositionLeft":{"name":"kAPSSkipOverlayProgressPositionLeft","abstract":"<p>Render the progress circle in the left side of the skip overlay.</p>","parent_name":"APSSkipOverlayProgressPosition"},"Enums/APSSkipOverlayProgressPosition.html#/c:@E@APSSkipOverlayProgressPosition@kAPSSkipOverlayProgressPositionRight":{"name":"kAPSSkipOverlayProgressPositionRight","abstract":"<p>Render the progress circle in the right side of the skip overlay.</p>","parent_name":"APSSkipOverlayProgressPosition"},"Enums/APSSkipOverlayProgressPosition.html#/c:@E@APSSkipOverlayProgressPosition@kAPSSkipOverlayProgressPositionHidden":{"name":"kAPSSkipOverlayProgressPositionHidden","abstract":"<p>Do not render the progress circle.</p>","parent_name":"APSSkipOverlayProgressPosition"},"Enums/APSAdPodFallback.html#/c:@E@APSAdPodFallback@APSAdPodFallbackSelectAll":{"name":"APSAdPodFallbackSelectAll","abstract":"<p>Load all retrieved ads if no valid Ad Pods are found.</p>","parent_name":"APSAdPodFallback"},"Enums/APSAdPodFallback.html#/c:@E@APSAdPodFallback@APSAdPodFallbackSelectFirst":{"name":"APSAdPodFallbackSelectFirst","abstract":"<p>Load only the first retrieved ad if no valid Ad Pods are found.</p>","parent_name":"APSAdPodFallback"},"Enums/APSAdPodFallback.html#/c:@E@APSAdPodFallback@APSAdPodFallbackDrop":{"name":"APSAdPodFallbackDrop","abstract":"<p>Drop the whole ad request if no valid Ad Pods are found. This value will disable VAST 1.0 and 2.0 compatibility.</p>","parent_name":"APSAdPodFallback"},"Enums/APSResolvMultipleAdsConflictsBy.html#/c:@E@APSResolvMultipleAdsConflictsBy@APSResolvMultipleAdsConflictsByDropping":{"name":"APSResolvMultipleAdsConflictsByDropping","abstract":"<p>Solve the issue by dropping all loaded ads.</p>","parent_name":"APSResolvMultipleAdsConflictsBy"},"Enums/APSResolvMultipleAdsConflictsBy.html#/c:@E@APSResolvMultipleAdsConflictsBy@APSResolvMultipleAdsConflictsBySelectingFirst":{"name":"APSResolvMultipleAdsConflictsBySelectingFirst","abstract":"<p>Solve the issue by only inserting the first valid ad retrieved, honoring the defined order in the VAST.</p>","parent_name":"APSResolvMultipleAdsConflictsBy"},"Enums/APSResolvMultipleAdsConflictsBy.html#/c:@E@APSResolvMultipleAdsConflictsBy@APSResolvMultipleAdsConflictsBySelectingRandom":{"name":"APSResolvMultipleAdsConflictsBySelectingRandom","abstract":"<p>Solve the issue by only inserting one random ad from the loaded batch.</p>","parent_name":"APSResolvMultipleAdsConflictsBy"},"Enums/APSVASTAdBreakType.html#/c:@E@APSVASTAdBreakType@APSVASTPreContent":{"name":"APSVASTPreContent","abstract":"<p>Place the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s corresponding to the ad break at the beginning of the main content units.</p>","parent_name":"APSVASTAdBreakType"},"Enums/APSVASTAdBreakType.html#/c:@E@APSVASTAdBreakType@APSVASTPostContent":{"name":"APSVASTPostContent","abstract":"<p>Place the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s corresponding to the ad break at the end of the main content units.</p>","parent_name":"APSVASTAdBreakType"},"Enums/APSVASTAdBreakType.html#/c:@E@APSVASTAdBreakType@APSVASTMidContent":{"name":"APSVASTMidContent","abstract":"<p>Place the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s corresponding to the ad break in the middle of each main content unit, at a defined offset (see the <code>adOffset</code> property of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSVASTAdBreak.html\">APSVASTAdBreak</a></code>).</p>","parent_name":"APSVASTAdBreakType"},"Enums/APSVASTAdBreakType.html#/c:@E@APSVASTAdBreakType@APSVASTNonLinear":{"name":"APSVASTNonLinear","abstract":"<p>Place the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code>s corresponding to the ad break in the middle of each main content unit, ad a defined offset (see the <code>adOffset</code> property of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSVASTAdBreak.html\">APSVASTAdBreak</a></code>).</p>","parent_name":"APSVASTAdBreakType"},"Enums/APSFullscreenOrientationBehaviour.html#/c:@E@APSFullscreenOrientationBehaviour@APSDefaultOrientation":{"name":"APSDefaultOrientation","abstract":"<p>Default fullscreen orientation - matches phone orientation, according to user and app level settings</p>","parent_name":"APSFullscreenOrientationBehaviour"},"Enums/APSFullscreenOrientationBehaviour.html#/c:@E@APSFullscreenOrientationBehaviour@APSForcePortrait":{"name":"APSForcePortrait","abstract":"<p>Force portrait orientation for videos in fullscreen mode</p>","parent_name":"APSFullscreenOrientationBehaviour"},"Enums/APSFullscreenOrientationBehaviour.html#/c:@E@APSFullscreenOrientationBehaviour@APSForceLandscape":{"name":"APSForceLandscape","abstract":"<p>Force landscape orientation for videos in fullscreen mode</p>","parent_name":"APSFullscreenOrientationBehaviour"},"Enums/APSMovieFinishReason.html#/c:@E@APSMovieFinishReason@APSMovieFinishReasonPlaybackEnded":{"name":"APSMovieFinishReasonPlaybackEnded","abstract":"<p>Playback reached end of media</p>","parent_name":"APSMovieFinishReason"},"Enums/APSMovieFinishReason.html#/c:@E@APSMovieFinishReason@APSMovieFinishReasonPlaybackError":{"name":"APSMovieFinishReasonPlaybackError","abstract":"<p>There was an error playing the media</p>","parent_name":"APSMovieFinishReason"},"Enums/APSMovieFinishReason.html#/c:@E@APSMovieFinishReason@APSMovieFinishReasonUserExited":{"name":"APSMovieFinishReasonUserExited","abstract":"<p>Playback was ended by user action</p>","parent_name":"APSMovieFinishReason"},"Enums/APSMovieScalingMode.html#/c:@E@APSMovieScalingMode@APSMovieScalingModeNone":{"name":"APSMovieScalingModeNone","abstract":"<p>No scaling</p>","parent_name":"APSMovieScalingMode"},"Enums/APSMovieScalingMode.html#/c:@E@APSMovieScalingMode@APSMovieScalingModeAspectFit":{"name":"APSMovieScalingModeAspectFit","abstract":"<p>Uniform scale until one dimension fits</p>","parent_name":"APSMovieScalingMode"},"Enums/APSMovieScalingMode.html#/c:@E@APSMovieScalingMode@APSMovieScalingModeAspectFill":{"name":"APSMovieScalingModeAspectFill","abstract":"<p>Uniform scale until the movie fills the visible bounds. One dimension may have clipped contents</p>","parent_name":"APSMovieScalingMode"},"Enums/APSMovieScalingMode.html#/c:@E@APSMovieScalingMode@APSMovieScalingModeFill":{"name":"APSMovieScalingModeFill","abstract":"<p>Non-uniform scale. Both render dimensions will exactly match the visible bounds</p>","parent_name":"APSMovieScalingMode"},"Enums/APSMovieControlStyle.html#/c:@E@APSMovieControlStyle@APSMovieControlStyleNone":{"name":"APSMovieControlStyleNone","abstract":"<p>No controls</p>","parent_name":"APSMovieControlStyle"},"Enums/APSMovieControlStyle.html#/c:@E@APSMovieControlStyle@APSMovieControlStyleEmbedded":{"name":"APSMovieControlStyleEmbedded","abstract":"<p>Controls for an embedded view</p>","parent_name":"APSMovieControlStyle"},"Enums/APSMovieControlStyle.html#/c:@E@APSMovieControlStyle@APSMovieControlStyleFullscreen":{"name":"APSMovieControlStyleFullscreen","abstract":"<p>Controls for fullscreen playback</p>","parent_name":"APSMovieControlStyle"},"Enums/APSMovieControlStyle.html#/c:@E@APSMovieControlStyle@APSMovieControlStyleDefault":{"name":"APSMovieControlStyleDefault","abstract":"<p>Controls for fullscreen playback</p>","parent_name":"APSMovieControlStyle"},"Enums/APSMovieSourceType.html#/c:@E@APSMovieSourceType@APSMovieSourceTypeUnknown":{"name":"APSMovieSourceTypeUnknown","abstract":"<p>Unknown media source type</p>","parent_name":"APSMovieSourceType"},"Enums/APSMovieSourceType.html#/c:@E@APSMovieSourceType@APSMovieSourceTypeFile":{"name":"APSMovieSourceTypeFile","abstract":"<p>Local or progressively downloaded network content</p>","parent_name":"APSMovieSourceType"},"Enums/APSMovieSourceType.html#/c:@E@APSMovieSourceType@APSMovieSourceTypeStreaming":{"name":"APSMovieSourceTypeStreaming","abstract":"<p>Live or on-demand streaming content</p>","parent_name":"APSMovieSourceType"},"Enums/APSMovieLoadState.html#/c:@E@APSMovieLoadState@APSMovieLoadStateUnknown":{"name":"APSMovieLoadStateUnknown","abstract":"<p>Unknown, initial load state</p>","parent_name":"APSMovieLoadState"},"Enums/APSMovieLoadState.html#/c:@E@APSMovieLoadState@APSMovieLoadStatePlayable":{"name":"APSMovieLoadStatePlayable","abstract":"<p>The media is now playable - enough content has buffered</p>","parent_name":"APSMovieLoadState"},"Enums/APSMovieLoadState.html#/c:@E@APSMovieLoadState@APSMovieLoadStatePlaythroughOK":{"name":"APSMovieLoadStatePlaythroughOK","abstract":"<p>The media is now completely playable - all content has been buffered</p>","parent_name":"APSMovieLoadState"},"Enums/APSMovieLoadState.html#/c:@E@APSMovieLoadState@APSMovieLoadStateStalled":{"name":"APSMovieLoadStateStalled","abstract":"<p>Playback is stalled - streaming error, buffering issue. Media will automatically pause</p>","parent_name":"APSMovieLoadState"},"Enums/APSMoviePlaybackState.html#/c:@E@APSMoviePlaybackState@APSMoviePlaybackStateStopped":{"name":"APSMoviePlaybackStateStopped","abstract":"<p>Media stopped</p>","parent_name":"APSMoviePlaybackState"},"Enums/APSMoviePlaybackState.html#/c:@E@APSMoviePlaybackState@APSMoviePlaybackStatePlaying":{"name":"APSMoviePlaybackStatePlaying","abstract":"<p>Media playing</p>","parent_name":"APSMoviePlaybackState"},"Enums/APSMoviePlaybackState.html#/c:@E@APSMoviePlaybackState@APSMoviePlaybackStatePaused":{"name":"APSMoviePlaybackStatePaused","abstract":"<p>Media paused</p>","parent_name":"APSMoviePlaybackState"},"Enums/APSMoviePlaybackState.html#/c:@E@APSMoviePlaybackState@APSMoviePlaybackStateInterrupted":{"name":"APSMoviePlaybackStateInterrupted","abstract":"<p>Media interrupted - streaming error, buffering issue</p>","parent_name":"APSMoviePlaybackState"},"Enums/APSMoviePlaybackState.html#/c:@E@APSMoviePlaybackState@APSMoviePlaybackStateSeekingForward":{"name":"APSMoviePlaybackStateSeekingForward","abstract":"<p>Seeking forward</p>","parent_name":"APSMoviePlaybackState"},"Enums/APSMoviePlaybackState.html#/c:@E@APSMoviePlaybackState@APSMoviePlaybackStateSeekingBackward":{"name":"APSMoviePlaybackStateSeekingBackward","abstract":"<p>Seeking backward</p>","parent_name":"APSMoviePlaybackState"},"Enums/APSMovieStreamSourceType.html#/c:@E@APSMovieStreamSourceType@APSMoviePlayerSourceTypeOnDemand":{"name":"APSMoviePlayerSourceTypeOnDemand","abstract":"<p>On-demand stream, has start and end</p>","parent_name":"APSMovieStreamSourceType"},"Enums/APSMovieStreamSourceType.html#/c:@E@APSMovieStreamSourceType@APSMoviePlayerSourceTypeLive":{"name":"APSMoviePlayerSourceTypeLive","abstract":"<p>Live stream, doesn&rsquo;t have a start or end</p>","parent_name":"APSMovieStreamSourceType"},"Enums/APSHandleSeekEvent.html#/c:@E@APSHandleSeekEvent@APSHandleSeekEventPlayFirstBreak":{"name":"APSHandleSeekEventPlayFirstBreak","abstract":"<p>This will only trigger the first ad break.</p>","parent_name":"APSHandleSeekEvent"},"Enums/APSHandleSeekEvent.html#/c:@E@APSHandleSeekEvent@APSHandleSeekEventPlayLastBreak":{"name":"APSHandleSeekEventPlayLastBreak","abstract":"<p>This will only trigger the last ad break.</p>","parent_name":"APSHandleSeekEvent"},"Enums/APSHandleSeekEvent.html#/c:@E@APSHandleSeekEvent@APSHandleSeekEventPlayAllBreaks":{"name":"APSHandleSeekEventPlayAllBreaks","abstract":"<p>This will trigger all ad breaks.</p>","parent_name":"APSHandleSeekEvent"},"Enums/APSMediaControlsDisplay.html#/c:@E@APSMediaControlsDisplay@APSMediaControlsDisplayBottom":{"name":"APSMediaControlsDisplayBottom","abstract":"<p>The controls bar should be displayed at the bottom of the player surface.</p>","parent_name":"APSMediaControlsDisplay"},"Enums/APSMediaControlsDisplay.html#/c:@E@APSMediaControlsDisplay@APSMediaControlsDisplayTop":{"name":"APSMediaControlsDisplayTop","abstract":"<p>The controls bar should be displayed at the top of the player surface.</p>","parent_name":"APSMediaControlsDisplay"},"Enums/APSMediaControlsDisplay.html#/c:@E@APSMediaControlsDisplay@APSMediaControlsDisplayNone":{"name":"APSMediaControlsDisplayNone","abstract":"<p>The controls bar should not be displayed for this unit.</p>","parent_name":"APSMediaControlsDisplay"},"Enums/APSWebviewDismissedAction.html#/c:@E@APSWebviewDismissedAction@APSHideOverlayOnWebviewDismiss":{"name":"APSHideOverlayOnWebviewDismiss","abstract":"<p>Player should hide the calling overlay on webview dismiss.</p>","parent_name":"APSWebviewDismissedAction"},"Enums/APSWebviewDismissedAction.html#/c:@E@APSWebviewDismissedAction@APSSkipUnitOnWebviewDismiss":{"name":"APSSkipUnitOnWebviewDismiss","abstract":"<p>Player should skip the current unit on webview dismiss.</p>","parent_name":"APSWebviewDismissedAction"},"Enums/APSWebviewDismissedAction.html#/c:@E@APSWebviewDismissedAction@APSDoNothingOnWebviewDismiss":{"name":"APSDoNothingOnWebviewDismiss","abstract":"<p>No action should be taken on webview dismiss.</p>","parent_name":"APSWebviewDismissedAction"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSCurrentTimeControl":{"name":"APSCurrentTimeControl","abstract":"<p>The current playback time counter.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSTimeSliderControl":{"name":"APSTimeSliderControl","abstract":"<p>The seek bar (time slider) control.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSTotalTimeControl":{"name":"APSTotalTimeControl","abstract":"<p>The total playback time display.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSAirPlayControl":{"name":"APSAirPlayControl","abstract":"<p>The AirPlay video control. This control only appears when an AirPlay ready device is detected in the current network.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSFullScreenControl":{"name":"APSFullScreenControl","abstract":"<p>The fullscreen toggle control.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSThumbnailTimeSliderControl":{"name":"APSThumbnailTimeSliderControl","abstract":"<p>The seek bar (time slider) control, with mid-seek thumbnail support.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSPreviousControl":{"name":"APSPreviousControl","abstract":"<p>Control allowing the user to return to previous unit in the playlist.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSNextControl":{"name":"APSNextControl","abstract":"<p>Control allowing the user to proceed to the next unit in the playlist.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSPlaybackControl":{"name":"APSPlaybackControl","abstract":"<p>The play/stop control.</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSAdMarksControl":{"name":"APSAdMarksControl","abstract":"<p>The ad marks</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSControlsOverlayComponents.html#/c:@E@APSControlsOverlayComponents@APSPiPControl":{"name":"APSPiPControl","abstract":"<p>The PiP toggle control</p>","parent_name":"APSControlsOverlayComponents"},"Enums/APSViewability.html#/c:@E@APSViewability@APSViewabilityViewable":{"name":"APSViewabilityViewable","abstract":"<p>Player&rsquo;s viewport is more than 50% viewable</p>","parent_name":"APSViewability"},"Enums/APSViewability.html#/c:@E@APSViewability@APSViewabilityNotViewable":{"name":"APSViewabilityNotViewable","abstract":"<p>Player&rsquo;s viewport is less than 50% viewable</p>","parent_name":"APSViewability"},"Enums/APSViewability.html#/c:@E@APSViewability@APSViewabilityUndetermined":{"name":"APSViewabilityUndetermined","abstract":"<p>Player&rsquo;s viewpoer could not be determined</p>","parent_name":"APSViewability"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionFullscreen":{"name":"kAPSMediaOverlayPositionFullscreen","abstract":"<p>The overlay should be stretched to fit the whole player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionBottomLeft":{"name":"kAPSMediaOverlayPositionBottomLeft","abstract":"<p>The overlay should be bottom-left aligned with the player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionBottomRight":{"name":"kAPSMediaOverlayPositionBottomRight","abstract":"<p>The overlay should be bottom-right aligned with the player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionTopLeft":{"name":"kAPSMediaOverlayPositionTopLeft","abstract":"<p>The overlay should be top-left aligned with the player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionTopRight":{"name":"kAPSMediaOverlayPositionTopRight","abstract":"<p>The overlay should be top-right aligned with the player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionTop":{"name":"kAPSMediaOverlayPositionTop","abstract":"<p>The overlay should be placed centrally in the top of the player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionBottom":{"name":"kAPSMediaOverlayPositionBottom","abstract":"<p>The overlay should be placed centrally at the bottom of the player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionLeft":{"name":"kAPSMediaOverlayPositionLeft","abstract":"<p>The overlay should be vertically centered to the left of the player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionRight":{"name":"kAPSMediaOverlayPositionRight","abstract":"<p>The overlay should be vertically centered to the right of the player surface.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaOverlayPosition.html#/c:@E@APSMediaOverlayPosition@kAPSMediaOverlayPositionUnspecified":{"name":"kAPSMediaOverlayPositionUnspecified","abstract":"<p>The overlay will not be placed on screen.</p>","parent_name":"APSMediaOverlayPosition"},"Enums/APSMediaEventState.html#/c:@E@APSMediaEventState@APSMediaEventStateUnloaded":{"name":"APSMediaEventStateUnloaded","abstract":"<p>The event has not yet been loaded.</p>","parent_name":"APSMediaEventState"},"Enums/APSMediaEventState.html#/c:@E@APSMediaEventState@APSMediaEventStatePreloading":{"name":"APSMediaEventStatePreloading","abstract":"<p>The event is currently preloading.</p>","parent_name":"APSMediaEventState"},"Enums/APSMediaEventState.html#/c:@E@APSMediaEventState@APSMediaEventStatePreloaded":{"name":"APSMediaEventStatePreloaded","abstract":"<p>The event has succesfully preloaded and is ready to be triggered.</p>","parent_name":"APSMediaEventState"},"Enums/APSMediaEventState.html#/c:@E@APSMediaEventState@APSMediaEventStateFailed":{"name":"APSMediaEventStateFailed","abstract":"<p>The event failed to preload and should not be triggered.</p>","parent_name":"APSMediaEventState"},"Enums/APSMediaEventState.html#/c:@E@APSMediaEventState@APSMediaEventStateTriggered":{"name":"APSMediaEventStateTriggered","abstract":"<p>The event is triggered.</p>","parent_name":"APSMediaEventState"},"Enums/APSMediaEventState.html#/c:@E@APSMediaEventState@APSMediaEventStateFinished":{"name":"APSMediaEventStateFinished","abstract":"<p>The event finished.</p>","parent_name":"APSMediaEventState"},"Enums/APSMediaEventState.html":{"name":"APSMediaEventState","abstract":"<p>Describes the current lifecycle state of a APSMediaEvent.</p>"},"Enums/APSMediaOverlayPosition.html":{"name":"APSMediaOverlayPosition","abstract":"<p>Describes the position the overlay should take when placed on-screen by the player.</p>"},"Enums/APSViewability.html":{"name":"APSViewability","abstract":"<p>Defines the viewability status of the player according to VAST 4 specifications</p>"},"Enums/APSControlsOverlayComponents.html":{"name":"APSControlsOverlayComponents","abstract":"<p>Controls bar components.</p>"},"Enums/APSWebviewDismissedAction.html":{"name":"APSWebviewDismissedAction","abstract":"<p>Defines the action that the player should take when resuming playback after an interruption caused by user interaction, that determined the display of the in-app web browser.</p>"},"Enums/APSMediaControlsDisplay.html":{"name":"APSMediaControlsDisplay","abstract":"<p>Specifies how the controls bar should be displayed for a media unit.</p>"},"Enums/APSHandleSeekEvent.html":{"name":"APSHandleSeekEvent","abstract":"<p>Specifies how the unit should handle seeking through multiple ad breaks.</p>"},"Enums/APSMovieStreamSourceType.html":{"name":"APSMovieStreamSourceType","abstract":"<p>If the movie source type is a stream, this identifies the type of stream (on-demand or live)</p>"},"Enums/APSMoviePlaybackState.html":{"name":"APSMoviePlaybackState","abstract":"<p>The different playback states the player can be in</p>"},"Enums/APSMovieLoadState.html":{"name":"APSMovieLoadState","abstract":"<p>The different load states any media can have during its lifetime</p>"},"Enums/APSMovieSourceType.html":{"name":"APSMovieSourceType","abstract":"<p>The different movie source types available</p>"},"Enums/APSMovieControlStyle.html":{"name":"APSMovieControlStyle","abstract":"<p>Types of native controls that some backend renderers can use. These are provided by the OS, and are separate from the controls bar provided by the library.</p>"},"Enums/APSMovieScalingMode.html":{"name":"APSMovieScalingMode","abstract":"<p>Types of possible media scaling modes</p>"},"Enums/APSMovieFinishReason.html":{"name":"APSMovieFinishReason","abstract":"<p>Types of possible media playback finish reasons</p>"},"Enums/APSFullscreenOrientationBehaviour.html":{"name":"APSFullscreenOrientationBehaviour","abstract":"<p>Possible settings for fullscreen orientation handling</p>"},"Enums/APSVASTAdBreakType.html":{"name":"APSVASTAdBreakType","abstract":"<p>Defines how an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSVASTAdBreak.html\">APSVASTAdBreak</a></code> should be placed relative to the main content units.</p>"},"Enums/APSResolvMultipleAdsConflictsBy.html":{"name":"APSResolvMultipleAdsConflictsBy","abstract":"<p>The VMAP standard permits allowing only one ad from a certain ad source. This constant defines how the VAST builder plugin deals with situations when multiple valid ads are retrieved from a source that is disallowed to load several ads at one time.</p>"},"Enums/APSAdPodFallback.html":{"name":"APSAdPodFallback","abstract":"<p>VAST 3.0 defines Ad Pods, with fallback mechanisms that allow loading an ad buffet of commercials to playback if the main ads fail. This value specifies how to treat backwards compatibility issues with VAST 2.0 and 1.0, by choosing what ads are promoted to the main Ad Pod if no valid Pods are detected.</p>"},"Enums/APSSkipOverlayProgressPosition.html":{"name":"APSSkipOverlayProgressPosition","abstract":"<p>Defines where inside the skip overlay should the progress circle be rendered.</p>"},"Other%20Constants.html#/c:@APSMediaPlayerToggleFullscreenNotification":{"name":"APSMediaPlayerToggleFullscreenNotification","abstract":"<p>Posted when the fullscreen button was pressed and internal fullscreen handling is disabled</p>"},"Other%20Constants.html#/c:@APSMediaPlayerWillEnterFullscreenNotification":{"name":"APSMediaPlayerWillEnterFullscreenNotification","abstract":"<p>Posted before the media player enters fullscreen</p>"},"Other%20Constants.html#/c:@APSMediaPlayerDidEnterFullscreenNotification":{"name":"APSMediaPlayerDidEnterFullscreenNotification","abstract":"<p>Posted after the media player enters fullscreen</p>"},"Other%20Constants.html#/c:@APSMediaPlayerWillExitFullscreenNotification":{"name":"APSMediaPlayerWillExitFullscreenNotification","abstract":"<p>Posted before the media player exists fullscreen</p>"},"Other%20Constants.html#/c:@APSMediaPlayerDidExitFullscreenNotification":{"name":"APSMediaPlayerDidExitFullscreenNotification","abstract":"<p>Posted after the media player exists fullscreen</p>"},"Other%20Constants.html#/c:@APSMediaPlayerWillStartPictureInPictureNotification":{"name":"APSMediaPlayerWillStartPictureInPictureNotification","abstract":"<p>Posted before starting Picture in Picture mode</p>"},"Other%20Constants.html#/c:@APSMediaPlayerDidStartPictureInPictureNotification":{"name":"APSMediaPlayerDidStartPictureInPictureNotification","abstract":"<p>Posted after Picture in Picture mode was started</p>"},"Other%20Constants.html#/c:@APSMediaPlayerWillStopPictureInPictureNotification":{"name":"APSMediaPlayerWillStopPictureInPictureNotification","abstract":"<p>Posted before stopping Picture in Picture mode</p>"},"Other%20Constants.html#/c:@APSMediaPlayerDidStopPictureInPictureNotification":{"name":"APSMediaPlayerDidStopPictureInPictureNotification","abstract":"<p>Posted after stopping Picture in Picture mode</p>"},"Other%20Constants.html#/c:@APSMediaPlayerWasTappedNotification":{"name":"APSMediaPlayerWasTappedNotification","abstract":"<p>Posted when the user taps on the media player surface</p>"},"Other%20Constants.html#/c:@APSMediaPlayerControlsDisplayedNotification":{"name":"APSMediaPlayerControlsDisplayedNotification","abstract":"<p>Posted when the video controls bar becomes visible</p>"},"Other%20Constants.html#/c:@APSMediaPlayerControlsHiddenNotification":{"name":"APSMediaPlayerControlsHiddenNotification","abstract":"<p>Posted when the video controls bar becomes hidden</p>"},"Other%20Constants.html#/c:@APSMediaPlayerUpdateNotification":{"name":"APSMediaPlayerUpdateNotification","abstract":"<p>Posted every time the internal status of the media player changes. This will happen roughly once every second.</p>"},"Other%20Constants.html#/c:@APSMediaPlayerUnitFinishedNotification":{"name":"APSMediaPlayerUnitFinishedNotification","abstract":"<p>Posted when a media unit finishes playback, before the remaining playlist units are processed. The <code>userInfo</code> dictionary contains the APSMediaUnit object that just finished playback under the <code>KAPSMediaPlayerCurrentUnit</code> key.</p>"},"Other%20Constants.html#/c:@APSMediaPlayerErrorNotification":{"name":"APSMediaPlayerErrorNotification","abstract":"<p>Posted when the media player encounters an error in the process of unit playback. The <code>userInfo</code> dictionary contains the NSError object that represents the error under the <code>error</code> key.</p>"},"Other%20Constants.html#/c:@APSMediaPlayerStatusChangedNotification":{"name":"APSMediaPlayerStatusChangedNotification","abstract":"<p>Posted when the media player playback state has changed. You can immediately get the new state using the <code>playbackState</code> method of the APSMediaPlayer instance.</p>"},"Other%20Constants.html#/c:@APSMediaPlayerTrackedEventNotification":{"name":"APSMediaPlayerTrackedEventNotification","abstract":"<p>Posted when a trackable playback event occurs."},"Other%20Constants.html#/c:@APSMediaPlayerInvalidLicenseNotification":{"name":"APSMediaPlayerInvalidLicenseNotification","abstract":"<p>Posted when the player license is invalid. Playback will be disabled.</p>"},"Other%20Constants.html#/c:@APSMediaPlayerWillOpenMiniBrowser":{"name":"APSMediaPlayerWillOpenMiniBrowser","abstract":"<p>Posted when the internal minibrowser will open because an ad was tapped</p>"},"Other%20Constants.html#/c:@APSMediaPlayerWillCloseMiniBrowser":{"name":"APSMediaPlayerWillCloseMiniBrowser","abstract":"<p>Posted when the internal minibrowser will be dismissed</p>"},"Other%20Constants.html#/c:@APSMediaPlayerPlaybackDidFinishNotification":{"name":"APSMediaPlayerPlaybackDidFinishNotification","abstract":"<p>Posted when the internal player backend finished playback</p>"},"Other%20Constants.html#/c:@APSMediaPlayerLoadStateDidChangeNotification":{"name":"APSMediaPlayerLoadStateDidChangeNotification","abstract":"<p>Posted when the media load state changed</p>"},"Other%20Constants.html#/c:@APSMediaPlayerDurationAvailableNotification":{"name":"APSMediaPlayerDurationAvailableNotification","abstract":"<p>Posted when the duration of the played media becomes available</p>"},"Other%20Constants.html#/c:@APSMediaPlayerPlaybackStateDidChangeNotification":{"name":"APSMediaPlayerPlaybackStateDidChangeNotification","abstract":"<p>Posted when the media playback state changed</p>"},"Other%20Constants.html#/c:@APSMediaPlayerVolumeDidChangeNotification":{"name":"APSMediaPlayerVolumeDidChangeNotification","abstract":"<p>Posted when the volume changed</p>"},"Other%20Constants.html#/c:@APSMediaPlayerEventLaunch":{"name":"APSMediaPlayerEventLaunch","abstract":"<hr>"},"Other%20Constants.html#/c:@APSPipPlayerNotPossible":{"name":"APSPipPlayerNotPossible","abstract":"<p>Posted when Picture in Picture mode is not possible</p>"},"Other%20Constants.html#/c:@APSPipPlayerNotSupported":{"name":"APSPipPlayerNotSupported","abstract":"<p>Posted when Picture in Picture mode is not supported</p>"},"Other%20Constants.html#/c:@APSPipPlayerFailedToStartPictureInPictureWithError":{"name":"APSPipPlayerFailedToStartPictureInPictureWithError","abstract":"<p>Posted when the the player failed to initiate Picture in Picture mode</p>"},"Other%20Constants.html#/c:@APSPipPlayerWillStartPictureInPicture":{"name":"APSPipPlayerWillStartPictureInPicture","abstract":"<p>Posted before the player will start Picture in Picture mode</p>"},"Other%20Constants.html#/c:@APSPipPlayerDidStartPictureInPicture":{"name":"APSPipPlayerDidStartPictureInPicture","abstract":"<p>Posted after the player did start Picture in Picture mode</p>"},"Other%20Constants.html#/c:@APSPipPlayerWillStopPictureInPicture":{"name":"APSPipPlayerWillStopPictureInPicture","abstract":"<p>Posted before the player will stop Picture in Picture mode</p>"},"Other%20Constants.html#/c:@APSPipPlayerDidStopPictureInPicture":{"name":"APSPipPlayerDidStopPictureInPicture","abstract":"<p>Posted after the player did stop Picture in Picture mode</p>"},"Classes/KRHub.html#/c:objc(cs)KRHub(im)adaptersForGroup:":{"name":"-adaptersForGroup:","abstract":"<p>Returns the list of available registered objects for a specified group.</p>","parent_name":"KRHub"},"Classes/KRHub.html#/c:objc(cs)KRHub(im)registerAdapter:":{"name":"-registerAdapter:","abstract":"<p>Registers a new adapter to the default group.</p>","parent_name":"KRHub"},"Classes/KRHub.html#/c:objc(cs)KRHub(im)adapterForType:":{"name":"-adapterForType:","abstract":"<p>Returns an object of the specified type, if such an object is currently registered in the default group.</p>","parent_name":"KRHub"},"Classes/KRHub.html#/c:objc(cs)KRHub(im)registerAdapter:inGroup:":{"name":"-registerAdapter:inGroup:","abstract":"<p>Registeres a new adapter to a specific group</p>","parent_name":"KRHub"},"Classes/KRHub.html#/c:objc(cs)KRHub(im)adapterForType:inGroup:":{"name":"-adapterForType:inGroup:","abstract":"<p>Returns an object of the specified type, if such an object is currently registered in the specified group.</p>","parent_name":"KRHub"},"Classes/KRHub.html#/c:objc(cs)KRHub(im)registerClass:inGroup:":{"name":"-registerClass:inGroup:","abstract":"<p>Registers a class to a specific group and a specific type. Upon requesting a new object from this group and type, a new object of the registered class will be instantiated and returned.</p>","parent_name":"KRHub"},"Classes/KRHub.html#/c:objc(cs)KRHub(im)registerClass:":{"name":"-registerClass:","abstract":"<p>Registers a class to the default group, under a specific type. Upon requesting a new object from this type from the default group, a new object of the registered class will be instantiated and returned.</p>","parent_name":"KRHub"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)position":{"name":"position","abstract":"<p>The position of the skip ad overlay, relative to the player surface.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)defaultSkipOffset":{"name":"defaultSkipOffset","abstract":"<p>The default interval of time that needs to pass before the skip overlay is activated for tapping.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)text":{"name":"text","abstract":"<p>The text that should be displayed in the skip button.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)textColor":{"name":"textColor","abstract":"<p>The color of the text diplayed in the skip button.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)progressPosition":{"name":"progressPosition","abstract":"<p>Defines where inside the skip overlay should the progress circle be rendered.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)progressCircleColor":{"name":"progressCircleColor","abstract":"<p>Defines the color of the progress bar indicating the elapsed time since ad has started.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)progressCircleTextColor":{"name":"progressCircleTextColor","abstract":"<p>Defines the color of the text in the middle of the progress circle, indicating the number of seconds left until skip activation.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)progressCircleTrackColor":{"name":"progressCircleTrackColor","abstract":"<p>Defines the color of the progress bar indicating the total duration of the ad.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)padding":{"name":"padding","abstract":"<p>The internal padding that the skip overlay should apply to its content.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)borderColor":{"name":"borderColor","abstract":"<p>The color of the border for the skip overlay.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)borderRadius":{"name":"borderRadius","abstract":"<p>The corner radius of the border for the skip overlay.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)backgroundColor":{"name":"backgroundColor","abstract":"<p>The background color for the skip overlay.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)width":{"name":"width","abstract":"<p>The width of the skip overlay.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTSkipButtonConfiguration.html#/c:objc(cs)APSVASTSkipButtonConfiguration(py)height":{"name":"height","abstract":"<p>The height of the skip overlay.</p>","parent_name":"APSVASTSkipButtonConfiguration"},"Classes/APSVASTMediaBuilderPlugin.html#/c:objc(cs)APSVASTMediaBuilderPlugin(py)vmapURL":{"name":"vmapURL","abstract":"<p>The VMAP 1.0 URL that should be used to configure ad breaks.</p>","parent_name":"APSVASTMediaBuilderPlugin"},"Classes/APSVASTMediaBuilderPlugin.html#/c:objc(cs)APSVASTMediaBuilderPlugin(py)adBreakTemplate":{"name":"adBreakTemplate","abstract":"<p>The template object that holds default parameter values for ad breaks created from VMAP or VAST.</p>","parent_name":"APSVASTMediaBuilderPlugin"},"Classes/APSVASTMediaBuilderPlugin.html#/c:objc(cs)APSVASTMediaBuilderPlugin(py)adBreaks":{"name":"adBreaks","abstract":"<p>The currently defined ad breaks that the plugin will try to fill.</p>","parent_name":"APSVASTMediaBuilderPlugin"},"Classes/APSVASTMediaBuilderPlugin.html#/c:objc(cs)APSVASTMediaBuilderPlugin(py)defaultAdBreakPositions":{"name":"defaultAdBreakPositions","abstract":"<p>When loading ads via VMAP and using ad break positioning via &ldquo;#&rdquo;, this array defines the available, pre-defined positions that ads can be inserted at.</p>","parent_name":"APSVASTMediaBuilderPlugin"},"Classes/APSVASTMediaBuilderPlugin.html#/c:objc(cs)APSVASTMediaBuilderPlugin(py)desiredAdCategories":{"name":"desiredAdCategories","abstract":"<p>List of desired ad categories. Encoded with IABN-N values as specified in the &ldquo;Content Categories&rdquo; list of AdCOM 1.0.</p>","parent_name":"APSVASTMediaBuilderPlugin"},"Classes/APSVASTMediaBuilderPlugin.html#/c:objc(cs)APSVASTMediaBuilderPlugin(py)adBreakDelegate":{"name":"adBreakDelegate","abstract":"<p>Delegate for APSVASTAdBreak instances generated by this builder</p>","parent_name":"APSVASTMediaBuilderPlugin"},"Classes/APSVASTCountdownConfiguration.html#/c:objc(cs)APSVASTCountdownConfiguration(py)show":{"name":"show","abstract":"<p>Indicates whether the countdown until the next media starts should be displayed during video ads.</p>","parent_name":"APSVASTCountdownConfiguration"},"Classes/APSVASTCountdownConfiguration.html#/c:objc(cs)APSVASTCountdownConfiguration(py)position":{"name":"position","abstract":"<p>The position of the countdown overlay, relative to the player surface.</p>","parent_name":"APSVASTCountdownConfiguration"},"Classes/APSVASTCountdownConfiguration.html#/c:objc(cs)APSVASTCountdownConfiguration(py)text":{"name":"text","abstract":"<p>The text to be displayed in the countdown overlay. Use the &ldquo;<strong>remaining</strong>&rdquo; placeholder for the number of seconds.</p>","parent_name":"APSVASTCountdownConfiguration"},"Classes/APSVASTCountdownConfiguration.html#/c:objc(cs)APSVASTCountdownConfiguration(py)width":{"name":"width","abstract":"<p>The width of the countdown overlay.</p>","parent_name":"APSVASTCountdownConfiguration"},"Classes/APSVASTCountdownConfiguration.html#/c:objc(cs)APSVASTCountdownConfiguration(py)height":{"name":"height","parent_name":"APSVASTCountdownConfiguration"},"Classes/APSVASTCountdownConfiguration.html#/c:objc(cs)APSVASTCountdownConfiguration(py)font":{"name":"font","abstract":"<p>The font family to be used for the text in the countdown overlay.</p>","parent_name":"APSVASTCountdownConfiguration"},"Classes/APSVASTCountdownConfiguration.html#/c:objc(cs)APSVASTCountdownConfiguration(py)size":{"name":"size","abstract":"<p>The size of the font to be used for the text in the countdown overlay.</p>","parent_name":"APSVASTCountdownConfiguration"},"Classes/APSVASTCountdownConfiguration.html#/c:objc(cs)APSVASTCountdownConfiguration(py)color":{"name":"color","abstract":"<p>The color of the font to be used for the text in the countdown overlay.</p>","parent_name":"APSVASTCountdownConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)maxSize":{"name":"maxSize","abstract":"<p>The maximum allowed size for a non-linear ad. Non-linear ads that define sizes larger than this will be truncated.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)stretchToMaxSize":{"name":"stretchToMaxSize","abstract":"<p>Defines if non-linear ads should be stretched to the defined <code>bannerMaxSize</code>, should they declare a size smaller than that.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)position":{"name":"position","abstract":"<p>Defines how a non-linear banner overlay should be placed relative to the player surface.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)fadeInDuration":{"name":"fadeInDuration","abstract":"<p>Defines the fade-in animation duration for non-linear ads.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)defaultAdBreakDuration":{"name":"defaultAdBreakDuration","abstract":"<p>Defines the default number of seconds that a non-linear ad will be kept on display. This can be overridden by VAST ad configuration.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)skipOffset":{"name":"skipOffset","abstract":"<p>Defines the default number of seconds after which the non-linear ad close button becomes active.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)showCloseButton":{"name":"showCloseButton","abstract":"<p>Indicates whether a close button should be displayed on top of non-linear ads.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonImage":{"name":"closeButtonImage","abstract":"<p>Defines the image that should be displayed in the non-linear ads close button, instead of the default progress wheel.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonBackgroundColor":{"name":"closeButtonBackgroundColor","abstract":"<p>Defines the background color for the close button displayed on top of non-linear ads.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonXColor":{"name":"closeButtonXColor","abstract":"<p>Defines the color for the X symbol in the center of the close button.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonSize":{"name":"closeButtonSize","abstract":"<p>Indicates the lenght of a side of the non-linear ads close button square.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonInitialAlpha":{"name":"closeButtonInitialAlpha","abstract":"<p>Indicates the opacity of the non-linear ads close button before it is activated for receiving taps.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonFinalAlpha":{"name":"closeButtonFinalAlpha","abstract":"<p>Indicates the opacity of the non-linear close button after it has been activated for receiving taps.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonProgressColor":{"name":"closeButtonProgressColor","abstract":"<p>The color of the circular bar that indicates the currently elapsed time until the close button can be tapped.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonTrackColor":{"name":"closeButtonTrackColor","abstract":"<p>The color of the circular bar that indicates the total time until the close button can be tapped.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSVASTBannerConfiguration.html#/c:objc(cs)APSVASTBannerConfiguration(py)closeButtonOffset":{"name":"closeButtonOffset","abstract":"<p>Defines the offset that the non-linear ads close button should have from the top-right edge of the banner itself.</p>","parent_name":"APSVASTBannerConfiguration"},"Classes/APSMediaPlayerOverlayController.html#/c:objc(cs)APSMediaPlayerOverlayController(py)overlay":{"name":"overlay","abstract":"<p>A reference to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code> object associated with the current overlay controller.</p>","parent_name":"APSMediaPlayerOverlayController"},"Classes/APSMediaPlayerClosableOverlayController.html#/c:objc(cs)APSMediaPlayerClosableOverlayController(im)addCloseButtonWithParameters:":{"name":"-addCloseButtonWithParameters:","abstract":"<p>This method adds the close button to the current view stack.</p>","parent_name":"APSMediaPlayerClosableOverlayController"},"Classes/APSMediaPlayerClosableOverlayController.html#/c:objc(cs)APSMediaPlayerClosableOverlayController(im)removeCloseButton":{"name":"-removeCloseButton","abstract":"<p>This method removes the close button from the current view stack.</p>","parent_name":"APSMediaPlayerClosableOverlayController"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)type":{"name":"type","abstract":"<p>Overlay type. The values that can be used with this property are usually constants defined by each individual overlay controller</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)parameters":{"name":"parameters","abstract":"<p>Overlay parameters. Implementation-specific to overlay controllers.</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)position":{"name":"position","abstract":"<p>Describes the position the overlay should take when placed on-screen by the player. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/APSMediaOverlayPosition.html\">APSMediaOverlayPosition</a></code> for available values.</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)zIndex":{"name":"zIndex","abstract":"<p>The order of the overlay in the current view stack.</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)width":{"name":"width","abstract":"<p>The width of the overlay. Supports pixels (e.g.: @&ldquo;320&rdquo;) or percentages, relative to the total width (e.g.: @&ldquo;50%&rdquo;).</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)height":{"name":"height","abstract":"<p>The height of the overlay. Supports pixels (e.g.: @&ldquo;320&rdquo;) or percentages, relative to the total height (e.g.: @&ldquo;50%&rdquo;).</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)absoluteOffsetX":{"name":"absoluteOffsetX","abstract":"<p>The overlay&rsquo;s absolute horizontal offset, relative to the current origin. The current origin is determined by the overlay&rsquo;s <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)position\">position</a></code> parameter, while the positive direction is always toward the center of the player surface. Supports pixels (e.g.: @&ldquo;320&rdquo;) or percentages, relative to the total width (e.g.: @&ldquo;50%&rdquo;).</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)absoluteOffsetY":{"name":"absoluteOffsetY","abstract":"<p>The overlay&rsquo;s absolute vertical offset, relative to the current origin. The current origin is determined by the overlay&rsquo;s <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)position\">position</a></code> parameter, while the positive direction is always toward the center of the player surface. Supports pixels (e.g.: @&ldquo;320&rdquo;) or percentages, relative to the total height (e.g.: @&ldquo;50%&rdquo;).</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)fadeInDuration":{"name":"fadeInDuration","abstract":"<p>The duration (in seconds) for the fade in effect of the overlay, when it is placed on and taken off screen.</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)removeWhenHidden":{"name":"removeWhenHidden","abstract":"<p>Defines if the overlay should be removed from memory when its&rsquo; opacity becomes zero.</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)parentUnit":{"name":"parentUnit","abstract":"<p>After being added to a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> object, a reference to this parent can be found here.</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)controller":{"name":"controller","abstract":"<p>A refence to the overlay controller object. This is set by the player, on the overlay&rsquo;s initial render.</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(py)metadata":{"name":"metadata","abstract":"<p>Additional overlay information.</p>","parent_name":"APSMediaOverlay"},"Classes/APSMediaOverlay.html#/c:objc(cs)APSMediaOverlay(cm)positionFromString:":{"name":"+positionFromString:","abstract":"<p>Converts a string format to a APSMediaOverlayPosition value.</p>","parent_name":"APSMediaOverlay"},"Other%20Classes.html#/c:objc(cs)APSAVPlayer":{"name":"APSAVPlayer","abstract":"<p>The <code>APSAVPlayer</code> is a media backend renderer that handles playback via the native <code>AVPlayer</code> classes. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/APSMediaPlayerProtocol.html\">APSMediaPlayerProtocol</a></code> for more details.</p>"},"Classes/APSMediaOverlay.html":{"name":"APSMediaOverlay","abstract":"<p><code>APSMediaOverlay</code> describes any overlay that the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaPlayer.html\">APSMediaPlayer</a></code> instance needs to render during playback.</p>"},"Other%20Classes.html#/c:objc(cs)APSMediaPlayerButtonOverlayController":{"name":"APSMediaPlayerButtonOverlayController","abstract":"<p>The <code>APSMediaPlayerButtonOverlayController</code> allows placing a transparent overlay in a specific area of the player surface, that can trigger the launch of a specific URL. The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaPlayer.html\">APSMediaPlayer</a></code> instance will query the <code>actionDelegate</code> object to interpret and launch the specified URL. If the <code>actionDelegate</code> cannot respond to the URL, and the URL has a web scheme (http or https), it will be launched automatically in the in-app web browser.</p>"},"Classes/APSMediaPlayerClosableOverlayController.html":{"name":"APSMediaPlayerClosableOverlayController","abstract":"<p>The <code>APSMediaPlayerClosableOverlayController</code> class is meant to be a superclass for overlay controllers that need to display a configurable close button to remove the overlay from screen.</p>"},"Other%20Classes.html#/c:objc(cs)APSMediaPlayerHTMLOverlayController":{"name":"APSMediaPlayerHTMLOverlayController","abstract":"<p>The <code>APSMediaPlayerHTMLOverlayController</code> allows the inline loading of HTML content inside an overlay placed on top of video content.</p>"},"Other%20Classes.html#/c:objc(cs)APSMediaPlayerImageOverlayController":{"name":"APSMediaPlayerImageOverlayController","abstract":"<p>The <code>APSMediaPlayerImageOverlayController</code> allows placing an image on top of video content.</p>"},"Classes/APSMediaPlayerOverlayController.html":{"name":"APSMediaPlayerOverlayController","abstract":"<p>The superclass of all overlay controllers. Implements <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/APSMediaPlayerOverlayControllerProtocol.html\">APSMediaPlayerOverlayControllerProtocol</a></code>.</p>"},"Other%20Classes.html#/c:objc(cs)APSMediaPlayerTextOverlayController":{"name":"APSMediaPlayerTextOverlayController","abstract":"<p>The <code>APSMediaPlayerTextOverlayController</code> allows the displaying of text on top of video content.</p>"},"Classes/APSVASTBannerConfiguration.html":{"name":"APSVASTBannerConfiguration","abstract":"<p>Holds all configuration parameters for the banner ads displayed.</p>"},"Classes/APSVASTCountdownConfiguration.html":{"name":"APSVASTCountdownConfiguration","abstract":"<p>Holds all configuration parameters for the coundown overlay displayed on top of video ads.</p>"},"Classes/APSVASTMediaBuilderPlugin.html":{"name":"APSVASTMediaBuilderPlugin","abstract":"<p>The VAST Media Builder plugin extends an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaBuilder.html\">APSMediaBuilder</a></code> object by inserting preroll, postroll, midroll and non-linear ad breaks, loaded from VAST 1.0, VAST 2.0, VAST 3.0 and VMAP 1.0 sources.</p>"},"Classes/APSVASTSkipButtonConfiguration.html":{"name":"APSVASTSkipButtonConfiguration","abstract":"<p>Holds all configuration parameters for the skip button displayed on top of video ads</p>"},"Classes/KRHub.html":{"name":"KRHub","abstract":"<p>A <code>KRHub</code> object can easily become a container of references to other objects or classes, organized in groups. To be able to register themselves with a <code>KRHub</code>, objects must implement the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/KRAdapter.html\">KRAdapter</a></code> protocol. Within a single group there can not be more objects that declare the same type.</p>"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)sources":{"name":"sources","abstract":"<p>An array of <code>NSString</code> objects indicating the VAST URLs that will be called in order to populate the ad break with ads.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)type":{"name":"type","abstract":"<p>The ad break type. Specifies how the rezulting <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code>s need to be placed relative to the main content units. See <code>APSVASTConfigurationOptions</code> for more details about the possible values.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)adCount":{"name":"adCount","abstract":"<p>The number of ads in this adBreak</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)transactionId":{"name":"transactionId","abstract":"<p>An identifier used to correlate a chain of ad requests from the origination (supply) end.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)advertisingIdentifier":{"name":"advertisingIdentifier","abstract":"<p>The Apple IDFA or similar ad identifier</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)advertisingIdentifierType":{"name":"advertisingIdentifierType","abstract":"<p>The source of the IFA","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)isAdTrackingLimited":{"name":"isAdTrackingLimited","abstract":"<p>Whether to limit ad tracking or not</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)locationCoordinates":{"name":"locationCoordinates","abstract":"<p>GPS location coordinates in format <code>lat,lon</code></p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)adOffset":{"name":"adOffset","abstract":"<p>A string format that defines when midrolls and nonlinear ads should be inserted mid-unit for each content unit.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)repeatAfter":{"name":"repeatAfter","abstract":"<p>Defines the time interval in seconds after which the ad break will be repeated.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)userAgent":{"name":"userAgent","abstract":"<p>The user agent that should be used when making HTTP requests.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)delegate":{"name":"delegate","abstract":"<p>Delegate object</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(im)configureFromDictionary:":{"name":"-configureFromDictionary:","abstract":"<p>Configure an AdBreak from a dictionary structure.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)controlsDisplayForAds":{"name":"controlsDisplayForAds","abstract":"<p>Specifies how the controls bar will be displayed on top of video ads.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)controlsParametersForAds":{"name":"controlsParametersForAds","abstract":"<p>The configuration for the controls bar overlay on top of video ads.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)defaultIconHeightPercentage":{"name":"defaultIconHeightPercentage","abstract":"<p>Icons are rendered to a height that&rsquo;s proportional to the current player view height. This property defines the percentage of the current height to render ads to, while preserving the original aspect ration in calculating the rendered width.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)iconFadeInDuration":{"name":"iconFadeInDuration","abstract":"<p>The fade-in animation duration for displaying icons, in seconds.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)skipButtonConfiguration":{"name":"skipButtonConfiguration","abstract":"<p>Holds the configuration object for the skip button that appears on top of video ads.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)fullscreenButtonConfiguration":{"name":"fullscreenButtonConfiguration","abstract":"<p>Holds the configuration object for the fullscreen button that appears on top of video ads.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)countdownConfiguration":{"name":"countdownConfiguration","abstract":"<p>Holds the configuration object for the countdown overlay that appears on top of video ads.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)bannerConfiguration":{"name":"bannerConfiguration","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)allowMultipleAds":{"name":"allowMultipleAds","abstract":"<p>Defines whether the break should allow more than one ad to be played, even if more ads are retrieved.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)followWrappers":{"name":"followWrappers","abstract":"<p>Defines whether VAST Wrappers should be followed for the given URL sources.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)wrappersCountLimit":{"name":"wrappersCountLimit","abstract":"<p>Defines the number of wrappers to be received with no Inline response.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)multipleAdsConflictsPolicy":{"name":"multipleAdsConflictsPolicy","abstract":"<p>The VMAP standard permits allowing only one ad from a certain ad source. This constant defines how the VAST builder plugin deals with situations when multiple valid ads are retrieved from a source that is disallowed to load several ads at one time.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)adPodFallbackStrategy":{"name":"adPodFallbackStrategy","abstract":"<p>VAST 3.0 defines Ad Pods, with fallback mechanisms that allow loading an ad buffet of commercials to playback if the main ads fail. This value specifies how to treat backwards compatibility issues with VAST 2.0 and 1.0, by choosing what ads are promoted to the main Ad Pod if no valid Pods are detected.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)prefferedVideoMimeTypes":{"name":"prefferedVideoMimeTypes","abstract":"<p>An array that defines the mime-types supported when choosing a media file from the VAST response.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)desiredAdCategories":{"name":"desiredAdCategories","abstract":"<p>List of desired ad categories. Encoded with IABN-N values as specified in the &ldquo;Content Categories&rdquo; list of AdCOM 1.0.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)blockedAdCategories":{"name":"blockedAdCategories","abstract":"<p>A list of blocked ad categories from wrappers</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)scalingMode":{"name":"scalingMode","abstract":"<p>The ad video clip scaling mode, relative to the player surface.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)allowPinchToFullscreen":{"name":"allowPinchToFullscreen","abstract":"<p>Defines if the pinch-to-fullscreen gesture should be activated for generated video ads.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)afterBannerTapped":{"name":"afterBannerTapped","abstract":"<p>Defines the behavior of the player after a banner ad is tapped and the built-in web browser is dismissed.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)afterVideoAdTapped":{"name":"afterVideoAdTapped","abstract":"<p>Defines the behavior of the player after a video ad is tapped and the built-in web browser is dismissed.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSVASTAdBreak.html#/c:objc(cs)APSVASTAdBreak(py)debug":{"name":"debug","abstract":"<p>Defines if the break should log debug information to the console.</p>","parent_name":"APSVASTAdBreak"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(im)setStartPoint:":{"name":"-setStartPoint:","abstract":"<p>Sets the starting time point of the event.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(im)setEndPoint:":{"name":"-setEndPoint:","abstract":"<p>Sets the ending time point of the event.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(im)startPoint":{"name":"-startPoint","abstract":"<p>The time interval (in seconds) when the player needs to trigger the event.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(im)endPoint":{"name":"-endPoint","abstract":"<p>The playback time (in seconds) when the player needs to unload the event. Defaults to -1 for events that should unload right after triggering.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(py)repeatAfter":{"name":"repeatAfter","abstract":"<p>If this parameter is greater than 0, then the event will be retriggered by the media player after the specific time interval (in seconds).</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(im)incrementStartAndEndPointsWithInterval:":{"name":"-incrementStartAndEndPointsWithInterval:","abstract":"<p>Shifts air-time for an event by a defined amount of time.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(im)adjustRelativeToDuration:":{"name":"-adjustRelativeToDuration:","abstract":"<p>Translates percentual values set via <code>setStartPoint</code> and <code>setEndPoint</code> to actual time intervals in seconds, relative to a specified total duration.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(im)trigger":{"name":"-trigger","abstract":"<p>Call this to trigger the event.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(im)preload":{"name":"-preload","abstract":"<p>Call this to preload the event.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(py)preloadInterval":{"name":"preloadInterval","abstract":"<p>Defines the number of seconds before the scheduled start point when the event should receive the [APSMediaEventProtocol preload] message (if the method is implemented).</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(py)timeout":{"name":"timeout","abstract":"<p>Defines the maximum number of seconds the event is allowed to live once it has been pretriggered, without setting the loaded property to <code>YES</code>.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(py)state":{"name":"state","abstract":"<p>The current lifecycle state of the event.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(py)preloadPoint":{"name":"preloadPoint","abstract":"<p>Set by the player to the current playback time in seconds, after the current event begins preloading. Defaults to -1 if the event did not start preloading.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaEvent.html#/c:objc(cs)APSMediaEvent(py)dynamicPosition":{"name":"dynamicPosition","abstract":"<p>Set this to <code>YES</code> if the event has no specific start time, and the player should handle insertion.</p>","parent_name":"APSMediaEvent"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)initWithURL:":{"name":"-initWithURL:","abstract":"<p>Initializes a media unit object.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)addOverlay:":{"name":"-addOverlay:","abstract":"<p>Adds an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code> object to the unit, to be rendered together.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)setOverlays:":{"name":"-setOverlays:","abstract":"<p>Connects an array of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code> objects to the current unit.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)clearOverlays":{"name":"-clearOverlays","abstract":"<p>Removes all currently connected overlays.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)overlays":{"name":"-overlays","abstract":"<p>Returns an array containing all <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code> objects currently connected to the unit.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)addEvent:":{"name":"-addEvent:","abstract":"<p>Adds an object that implements the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaEvent.html\">APSMediaEvent</a></code> protocol to the unit.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)setEvents:":{"name":"-setEvents:","abstract":"<p>Connects an array of objects that implement the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaEvent.html\">APSMediaEvent</a></code> protocol to the current unit.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)clearEvents":{"name":"-clearEvents","abstract":"<p>Removes all currently connected events.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)removeEvent:":{"name":"-removeEvent:","abstract":"<p>Removes a specific media event.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)events":{"name":"-events","abstract":"<p>Returns an array containing all event objects currently connected to the unit, that are not dynamic (see [APSMediaEvent dynamicPosition]).</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(im)dynamicEvents":{"name":"-dynamicEvents","abstract":"<p>Returns an array containing all event objects currently connected to the unit, that are dynamic (see [APSMediaEvent dynamicPosition]).</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)url":{"name":"url","abstract":"<p>The video clip URL.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)mezzanineUrl":{"name":"mezzanineUrl","abstract":"<p>If an ad, the URL to mezzanine file which was the source of this ad</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)initialPlaybackTime":{"name":"initialPlaybackTime","abstract":"<p>Initial video playback time in seconds.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)controlsDisplay":{"name":"controlsDisplay","abstract":"<p>Defines how the controls bar will be displayed for the unit. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/APSMediaControlsDisplay.html\">APSMediaControlsDisplay</a></code> for possible values.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)managerType":{"name":"managerType","abstract":"<p>Assigns a unit manager to the current unit. See APSUnitManagerProtocol for more information.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)subtitlesURL":{"name":"subtitlesURL","abstract":"<p>A NSURL pointing to the SRT subtitles to be loaded</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)controlsParameters":{"name":"controlsParameters","abstract":"<p>The configuration for the controls bar overlay.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)scalingMode":{"name":"scalingMode","abstract":"<p>The video clip scaling mode, relative to the player surface. Defaults to <code>APSMovieScalingModeNone</code>.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)buffet":{"name":"buffet","abstract":"<p>An array of other media units to be played instead of the current one, should an error be encountered. The unit at index 0 has the highest priority.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)pinchToFullscreen":{"name":"pinchToFullscreen","abstract":"<p>Defines if pinch-to-fullscreen should be allowed.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)shouldAutoplay":{"name":"shouldAutoplay","abstract":"<p>Defines if the unit should start playing as soon as it loads or wait for a play command.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)canReplay":{"name":"canReplay","abstract":"<p>Defines whether the player can replay the current unit or not after it has ended in the playlist.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)debug":{"name":"debug","abstract":"<p>Toggle to enable logs.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)metadata":{"name":"metadata","abstract":"<p>Additional unit key-value information.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)adbreak":{"name":"adbreak","abstract":"<p>The APSVASTAdBreak objects which created this unit</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)seekHandling":{"name":"seekHandling","abstract":"<p>Defines how mid content ads should be handled when the user has skipped over several batches. Use this parameter to instruct the player to render: only the first ad batch, only the last ad batch or all passed ad batches. Defaults to <code>APSHandleSeekEventPlayLastBreak</code>.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)midcontentAdMinimumInitialOffset":{"name":"midcontentAdMinimumInitialOffset","abstract":"<p>For ad breaks assigned to this unit without an ad offset (breaks that should be auto-positioned within the content), this parameter defines the minimum time interval in seconds to wait before displaying the first ad batch. Defaults to 300 seconds.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)midcontentAdMinimumFinalOffset":{"name":"midcontentAdMinimumFinalOffset","abstract":"<p>For ad breaks assigned to this unit without an ad offset (breaks that should be auto-positioned within the content), this parameter defines the minimum time interval in seconds (relative to the end of the video) that should be ad-free. Defaults to 300 seconds.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(py)midcontentAdMinimumSpacing":{"name":"midcontentAdMinimumSpacing","abstract":"<p>For ad breaks assigned to this unit without an ad offset (breaks that should be auto-positioned within the content), this parameter defines the minimum time interval in seconds to wait between ad batches. Defaults to 300 seconds.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaUnit.html#/c:objc(cs)APSMediaUnit(cm)scalingModeFromString:":{"name":"+scalingModeFromString:","abstract":"<p>Converts a string format to a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/APSMovieScalingMode.html\">APSMovieScalingMode</a></code> value.</p>","parent_name":"APSMediaUnit"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(cm)unitFromDictionary:":{"name":"+unitFromDictionary:","abstract":"<p>Factory method to generate new instance of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> via <code>NSDictionary</code> configuration.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(cm)overlayFromDictionary:":{"name":"+overlayFromDictionary:","abstract":"<p>Factory method to generate new instance of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code> via <code>NSDictionary</code> configuration.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)initWithMediaUnit:":{"name":"-initWithMediaUnit:","abstract":"<p>Initializes builder with a playlist of a single media unit.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)initWithMediaUnits:":{"name":"-initWithMediaUnits:","abstract":"<p>Initializes builder with a playlist of media units.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)configureFromURL:":{"name":"-configureFromURL:","abstract":"<p>Configures the builder from a JSON structure.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)configureFromURL:onComplete:":{"name":"-configureFromURL:onComplete:","abstract":"<p>Configures the builder asynchronously from a JSON structure.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)configureFromData:":{"name":"-configureFromData:","abstract":"<p>Configures the builder from a <code>NSData</code> object.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)configureFromDictionary:":{"name":"-configureFromDictionary:","abstract":"<p>Configures the builder from a <code>NSDictionary</code> object.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(py)contentUnits":{"name":"contentUnits","abstract":"<p>Array containing the main content <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s that will make up the playlist.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(py)bumperUnits":{"name":"bumperUnits","abstract":"<p>Array containing <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s that will be scheduled before ones in contentUnits in the generated playlist.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(py)exitUnits":{"name":"exitUnits","abstract":"<p>Array containing <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s that will be scheduled after ones in contentUnits in the generated playlist.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(py)userAgent":{"name":"userAgent","abstract":"<p>The user agent that should be used when making HTTP requests.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(py)debugMode":{"name":"debugMode","abstract":"<p>This property enables or disables console logging on all generated units.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)mediaUnits":{"name":"-mediaUnits","abstract":"<p>Returns a generated playlist of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s, based on builder configuration and registered plugins.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)requestMediaUnitsWithCompletionBlock:":{"name":"-requestMediaUnitsWithCompletionBlock:","abstract":"<p>Asynchronously generates a playlist of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s, based on builder configuration and registered plugins.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaBuilder.html#/c:objc(cs)APSMediaBuilder(im)addPlugin:":{"name":"-addPlugin:","abstract":"<p>Registers a new plugin.</p>","parent_name":"APSMediaBuilder"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(cm)sharedInstance":{"name":"+sharedInstance","abstract":"<p>Returns the shared <code>APSMediaPlayer</code> instance, creating it if necessary.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(cm)supportedMimeTypes":{"name":"+supportedMimeTypes","abstract":"<p>List of supported media types</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)view":{"name":"view","abstract":"<p>The container <code>UIView</code> of the player.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)setFrame:":{"name":"-setFrame:","abstract":"<p>Call this method to set the player view frame.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)backendPlayer":{"name":"backendPlayer","abstract":"<p>The backend player to use - call this if you are using constants instead of classes. Otherwise, use <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)backendPlayerClass\">backendPlayerClass</a></code>.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)backendPlayerClass":{"name":"backendPlayerClass","abstract":"<p>A class which is compliant to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/APSMediaPlayerProtocol.html\">APSMediaPlayerProtocol</a></code> and which will be used as a backend player. Use <code>[APSAVPlayer class]</code> for the AVPlayer-based backend or <code>[APSMPMoviePlayer class]</code> for the MPMoviePlayerController-based backend.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)debug":{"name":"debug","abstract":"<p>Enable debug logging</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)userAgent":{"name":"userAgent","abstract":"<p>The user agent that should be used when making HTTP requests.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)regulationInformation":{"name":"regulationInformation","abstract":"<p>Consent information regarding GDPR and other regulations</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)internalFullscreenSupport":{"name":"internalFullscreenSupport","abstract":"<p>Set this to NO to disable internal fullscreen handling. Fullscreen functionality should be implemented externally, using the available methods and notifications emitted by the player.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)leaveFullscreenOnStop":{"name":"leaveFullscreenOnStop","abstract":"<p>Set this to NO if you don&rsquo;t want the player to automatically leave fullscreen state after stopping or playing all media units</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)fullscreenOnLandscapeRotate":{"name":"fullscreenOnLandscapeRotate","abstract":"<p>Enable auto-fullscreen on device orientation</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)autoPauseWhenNotVisible":{"name":"autoPauseWhenNotVisible","abstract":"<p>Pauses video when player loses viewability</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)advancedViewabilityTracking":{"name":"advancedViewabilityTracking","abstract":"<p>Enables advanced viewability tracking algorithms, which are more CPU expensive but more precise</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)preferGoogleIma":{"name":"preferGoogleIma","abstract":"<p>Enable Google&rsquo;s IMA SDK</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)fullscreenOrientationBehaviour":{"name":"fullscreenOrientationBehaviour","abstract":"<p>Define allowed orientations for fullscreen mode</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)prepareMediaUnits:":{"name":"-prepareMediaUnits:","abstract":"<p>Prepare media units so they can be gapless played (when supported)</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)playMediaUnits:":{"name":"-playMediaUnits:","abstract":"<p>Sets and begins playback of an array of media units.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)insertMediaUnits:":{"name":"-insertMediaUnits:","abstract":"<p>Inserts new media units after the current one, in the current playlist.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)replaceCurrentUnitWithUnits:":{"name":"-replaceCurrentUnitWithUnits:","abstract":"<p>Replaces the currently running media unit with multiple other units. Playback of the new units is started automatically.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)setMediaUnits:":{"name":"-setMediaUnits:","abstract":"<p>Sets new units to the playlist, clearing any old ones.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)currentUnit":{"name":"-currentUnit","abstract":"<p>Returns the currently playing media unit.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)setCurrentURL:":{"name":"-setCurrentURL:","abstract":"<p>Sets the video clip URL for the current media unit. The clip is processeed immmediately.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)addOverlays:":{"name":"-addOverlays:","abstract":"<p>Adds additional overlays to display over the current unit.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)addEvents:":{"name":"-addEvents:","abstract":"<p>Adds additional events to the current unit&rsquo;s timeline.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)trackEvent:":{"name":"-trackEvent:","abstract":"<p>This method triggers an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbOther%20Constants.html#/c:@APSMediaPlayerTrackedEventNotification\">APSMediaPlayerTrackedEventNotification</a></code> notification.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)trackEvent:type:forObject:":{"name":"-trackEvent:type:forObject:","abstract":"<p>This is a wrapper for trackEvent:type:forObject:metadata:urls:</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)actionDelegate":{"name":"actionDelegate","abstract":"<p>The player&rsquo;s action delegate. Any intent to execute specific URLs as a result of user interaction will be notified to the delegate for action.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)modalViewControllerRoot":{"name":"modalViewControllerRoot","abstract":"<p>The view controller that will be used to present any modal views by the player.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)openURL:":{"name":"-openURL:","abstract":"<p>Instructs the player that a new URL needs to be interpreted and executed. This method will first ask the actionDelegate to respond to the given URL. If the actionDelegate declines to respond and the URL has a web scheme (`http://&lsquo; or &#39;https://&rsquo;) then an in-app web browser window will be displayed modally.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)openURL:from:":{"name":"-openURL:from:","abstract":"<p>Instructs the player that a new URL needs to be interpreted and executed. This method also specifies the calling overlay controller, as it can define specific behavior for the player upon returning to the foreground after the playback interruption (see <code>onWebviewDismiss</code> in <code>APSMediaPlayerOverlayController.h</code>).</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)isProcessing":{"name":"isProcessing","abstract":"<p>Returns a Boolean value specifing if the player is currently rendering a playlist of units (read-only).</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)play":{"name":"-play","abstract":"<p>Starts playback of the current unit.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)pause":{"name":"-pause","abstract":"<p>Pauses playback of the current unit.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)interrupt":{"name":"-interrupt","abstract":"<p>Interrupts video playback - same as pause, but will not trigger the same events as human interaction would.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)stop":{"name":"-stop","abstract":"<p>Stops playback of the current unit.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)skip":{"name":"-skip","abstract":"<p>Proceeds to the next unit in the playlist and sends a skip event.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)next":{"name":"-next","abstract":"<p>Proceeds to the next unit in the playlist and sends an exit event.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)step":{"name":"-step","abstract":"<p>Proceeds to the next unit in the playlist.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)previous":{"name":"-previous","abstract":"<p>Replays the most recently played unit in the current playlist that has the <code>canReplay</code> property set to <code>YES</code>. If no such units are found, the current unit is restarted.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)onFinish":{"name":"onFinish","abstract":"<p>A block object that will get executed when a playlist of units is finished rendering by the player.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)currentPlaybackTime":{"name":"-currentPlaybackTime","abstract":"<p>Returns the current playback time.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)setCurrentPlaybackTime:":{"name":"-setCurrentPlaybackTime:","abstract":"<p>Sets the current playback time.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)duration":{"name":"-duration","abstract":"<p>Returns the current unit&rsquo;s video clip total duration.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)playableDuration":{"name":"-playableDuration","abstract":"<p>Returns the current unit&rsquo;s video clip playable duration (the time interval that has already buffered and is ready for playback).</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)playbackState":{"name":"-playbackState","abstract":"<p>Returns the current unit&rsquo;s playback state.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)loadState":{"name":"-loadState","abstract":"<p>Returns the current unit&rsquo;s load state.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)movieSourceType":{"name":"-movieSourceType","abstract":"<p>Returns the current unit&rsquo;s movie source type.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)isStreamingLive":{"name":"-isStreamingLive","abstract":"<p>Returns <code>YES</code> if the player is currently rendering a live stream.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)timedMetadata":{"name":"-timedMetadata","abstract":"<p>Obtains the most recent time-based metadata provided by the streamed movie.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)setVolume:":{"name":"-setVolume:","abstract":"<p>Set the sound volume of the player, in the range of 0.0 to 1.0.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)getVolume":{"name":"-getVolume","abstract":"<p>Get the sound volume of the player, in the range of 0.0 to 1.0.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)setMute:":{"name":"-setMute:","abstract":"<p>Mute the player</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)getMute":{"name":"-getMute","abstract":"<p>Get if the player is muted or no</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)viewability":{"name":"viewability","abstract":"<p>Get the player&rsquo;s viewability state</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)availableSubtitles":{"name":"-availableSubtitles","abstract":"<p>Returns a NSDictionary with available subtitles","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)enableSubtitle:":{"name":"-enableSubtitle:","abstract":"<p>Enable the corresponding subtitle for the given language</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)availableAudioTracks":{"name":"-availableAudioTracks","abstract":"<p>Returns a NSDictionary with available audio tracks","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)enableAudioTrack:":{"name":"-enableAudioTrack:","abstract":"<p>Select the corresponding audio track for the given audio track ID</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)thumbnailAt:withCompletionBlock:":{"name":"-thumbnailAt:withCompletionBlock:","abstract":"<p>Returns a snapshot image of the current video, at the requested time interval in the playback.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)isFullscreen":{"name":"isFullscreen","abstract":"<p>Returns a Boolean value specifing if the player is currently in fullscreen (read-only).</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)toggleFullscreen":{"name":"-toggleFullscreen","abstract":"<p>Toggle the current fullscreen status.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)enterFullscreen":{"name":"-enterFullscreen","abstract":"<p>Enter fullscreen mode.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)exitFullscreen":{"name":"-exitFullscreen","abstract":"<p>Exit fullscreen mode.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)isPictureInPictureActive":{"name":"-isPictureInPictureActive","abstract":"<p>Returns a Boolean value specifing if Picture in Picture is currently active</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)togglePictureInPicture":{"name":"-togglePictureInPicture","abstract":"<p>Toggle Picture in Picture mode</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)startPictureInPicture":{"name":"-startPictureInPicture","abstract":"<p>Start Picture in Picture mode</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)stopPictureInPicture":{"name":"-stopPictureInPicture","abstract":"<p>Stop Picture in Picture mode</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)registerOverlayController:":{"name":"-registerOverlayController:","abstract":"<p>Registers a new overlay controller with the player.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)overlayControllerForType:":{"name":"-overlayControllerForType:","abstract":"<p>This method instantiates and returns a new object of the class registered for the given overlay type.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)registerUnitManager:":{"name":"-registerUnitManager:","abstract":"<p>Registers a new unit manager to dynamically handle media playback.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)allowsAirPlay":{"name":"allowsAirPlay","abstract":"<p>Specifies whether the movie player allows AirPlay movie playback.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)airPlayVideoActive":{"name":"-airPlayVideoActive","abstract":"<p>Indicates whether the movie player is currently playing video via AirPlay.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)showActivityIndicator":{"name":"-showActivityIndicator","abstract":"<p>Shows an activity indicator, centrally in the player surface.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)hideActivityIndicator":{"name":"-hideActivityIndicator","abstract":"<p>Hides the player activity indicator.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)resetDisplayedOverlays":{"name":"-resetDisplayedOverlays","abstract":"<p>Resets all displayed overlays.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)resetDisplayedOverlays:":{"name":"-resetDisplayedOverlays:","abstract":"<p>Resets all displayed overlays.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)unitsForAdbreak:":{"name":"-unitsForAdbreak:","abstract":"<p>Returns an array of units owned by an APSVASTAdbreak object</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(cm)durationFromString:":{"name":"+durationFromString:","abstract":"<p>Parses a string format and returns a translated time interval in seconds.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)ignoreSilentSwitch":{"name":"ignoreSilentSwitch","abstract":"<p>Specifies whether the player should ignore the device silent switch setting.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)detectBreachedDevice":{"name":"detectBreachedDevice","abstract":"<p>Specifies whether the player should stop functioning if the currently running device is detected to be jailbroken.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)enableBackgroundPlayback":{"name":"enableBackgroundPlayback","abstract":"<p>Set this to true to continue playing videos while the app is in background</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)advertisingIdentifier":{"name":"advertisingIdentifier","abstract":"<p>Use this property to store the unique device advertising identifier, that can then be used by 3rd party components.</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(py)urlSession":{"name":"urlSession","abstract":"<p>A NSURLSession used for retrieving data from the internet</p>","parent_name":"APSMediaPlayer"},"Classes/APSMediaPlayer.html#/c:objc(cs)APSMediaPlayer(im)clear":{"name":"-clear","abstract":"<p>Resets the media player backend.</p>","parent_name":"APSMediaPlayer"},"readme.html":{"name":"README"},"Classes/APSMediaPlayer.html":{"name":"APSMediaPlayer","abstract":"<p>The APSMediaPlayer handles playback and rendering of APSMediaUnits and APSMediaOverlays.</p>"},"Classes/APSMediaBuilder.html":{"name":"APSMediaBuilder","abstract":"<p>The <code>APSMediaBuilder</code> assists in creating playlists of fully configurable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s, together with attached, configurable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code>s, using JSON files or using a <code>NSDictionary</code>, both following the same structure.</p>"},"Classes/APSMediaUnit.html":{"name":"APSMediaUnit","abstract":"<p>The <code>APSMediaUnit</code> class represents a clip that&rsquo;s ready to be rendered by the player. A media unit also references an array of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaOverlay.html\">APSMediaOverlay</a></code> objects, defining the overlays connected to the unit.</p>"},"Classes/APSMediaEvent.html":{"name":"APSMediaEvent","abstract":"<p>The <code>APSMediaEvent</code> class describes a container that developers can use to instruct the player to run specific blocks of code at specific moments of time. Objects extending this class and implementing the corresponding <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/APSMediaEventProtocol.html\">APSMediaEventProtocol</a></code> protocol can be added to the player&rsquo;s main queue and can also be attached to a specific <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code> object, for runtime triggering.</p>"},"Classes/APSVASTAdBreak.html":{"name":"APSVASTAdBreak","abstract":"<p>An <code>APSVASTAdBreak</code> object defines an ad break for which the builder plugin will try to generate <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/APSMediaUnit.html\">APSMediaUnit</a></code>s and insert them into the playlist.</p>"},"Getting%20Started.html":{"name":"Getting Started"},"Other%20Classes.html":{"name":"Other Classes","abstract":"<p>The following classes are available globally.</p>"},"Other%20Constants.html":{"name":"Other Constants","abstract":"<p>The following constants are available globally.</p>"},"Other%20Enums.html":{"name":"Other Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Other%20Protocols.html":{"name":"Other Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Other%20Type%20Definitions.html":{"name":"Other Type Definitions","abstract":"<p>The following type definitions are available globally.</p>"}}